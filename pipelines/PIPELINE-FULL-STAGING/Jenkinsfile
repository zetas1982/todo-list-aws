pipeline {
    agent any
    stages {
        
        stage('SetUp'){
            steps{
                echo 'Setup Virtualenv for testing'
                sh "bash pipelines/PIPELINE-FULL-STAGING/setup.sh"
            }
        }
        stage('Test'){
            steps{
                echo 'Static program analysis:'
                sh "bash pipelines/PIPELINE-FULL-STAGING/static_test.sh"
                echo 'Unit testing:'
                sh "bash pipelines/PIPELINE-FULL-STAGING/unit_test.sh"
            }
            post {
                always {
                    script {
                        def failed = publishCoverage (failUnhealthy: true, 
                            globalThresholds: [[thresholdTarget: 'Line', unhealthyThreshold: 70.0]],
                            adapters: [coberturaAdapter(
                                mergeToOneReport: true, 
                                path: '**/coverage.xml')])
                    }
                }
            }
        }
       stage('Build') {
            steps{
                echo 'Package sam application:'
                sh "bash pipelines/common-steps/build.sh"
            }
        }
        stage('Deploy'){
            steps{
                echo 'Initiating Deployment'
                sh "bash pipelines/common-steps/deploy.sh"
            }
        }
        stage('Integration Test after deploy'){
            steps{
                script {
                    def BASE_URL = sh( script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text",
                        returnStdout: true)
                    echo "$BASE_URL"
                    echo 'Initiating Integration Tests'
                    sh "bash pipelines/common-steps/integration.sh $BASE_URL"
                }
                   
            }
        }
    }
    post { 
        always { 
            echo 'Clean env: delete dir'
            cleanWs()
        }
    }
}